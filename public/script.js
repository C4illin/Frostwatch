function getLocation() {
  if (navigator.geolocation) {
    const options = {
      enableHighAccuracy: false,
      timeout: 2000,
      maximumAge: 100000,
    };
    navigator.geolocation.getCurrentPosition(
      (position) => getWeather(position.coords),
      (error) => {
        console.log(error);
        getIPLocation();
      },
      options
    );
  } else {
    getIPLocation();
  }
}

function getIPLocation() {
  fetch("https://freeipapi.com/api/json")
    .then((response) => response.json())
    .then((data) => getWeather(data));
}

let GnBu = [
  [0.8363, 0.9361, 0.8125],
  [0.8338, 0.9351, 0.8098],
  [0.8314, 0.9341, 0.8071],
  [0.8289, 0.9331, 0.8044],
  [0.8265, 0.9321, 0.8016],
  [0.824, 0.9312, 0.7989],
  [0.8215, 0.9302, 0.7962],
  [0.8191, 0.9292, 0.7935],
  [0.8166, 0.9282, 0.7908],
  [0.8141, 0.9272, 0.7881],
  [0.8117, 0.9262, 0.7854],
  [0.8092, 0.9253, 0.7827],
  [0.8068, 0.9243, 0.78],
  [0.8043, 0.9233, 0.7773],
  [0.8018, 0.9223, 0.7746],
  [0.7989, 0.9211, 0.7721],
  [0.7945, 0.9194, 0.7701],
  [0.79, 0.9177, 0.7681],
  [0.7856, 0.916, 0.7662],
  [0.7812, 0.9142, 0.7642],
  [0.7767, 0.9125, 0.7622],
  [0.7723, 0.9108, 0.7602],
  [0.7679, 0.9091, 0.7583],
  [0.7635, 0.9074, 0.7563],
  [0.759, 0.9056, 0.7543],
  [0.7546, 0.9039, 0.7524],
  [0.7502, 0.9022, 0.7504],
  [0.7457, 0.9005, 0.7484],
  [0.7413, 0.8987, 0.7465],
  [0.7369, 0.897, 0.7445],
  [0.7325, 0.8953, 0.7425],
  [0.728, 0.8936, 0.7406],
  [0.7236, 0.8919, 0.7386],
  [0.7192, 0.8901, 0.7366],
  [0.7147, 0.8884, 0.7347],
  [0.7103, 0.8867, 0.7327],
  [0.7059, 0.885, 0.7307],
  [0.7015, 0.8832, 0.7288],
  [0.697, 0.8815, 0.7268],
  [0.6926, 0.8798, 0.7248],
  [0.6882, 0.8781, 0.7228],
  [0.6837, 0.8764, 0.7209],
  [0.6793, 0.8746, 0.7189],
  [0.6749, 0.8729, 0.7169],
  [0.6704, 0.8712, 0.715],
  [0.666, 0.8695, 0.713],
  [0.6616, 0.8677, 0.711],
  [0.6567, 0.8659, 0.7105],
  [0.6512, 0.8638, 0.7123],
  [0.6457, 0.8617, 0.7142],
  [0.6401, 0.8596, 0.716],
  [0.6346, 0.8575, 0.7179],
  [0.6291, 0.8554, 0.7197],
  [0.6235, 0.8533, 0.7216],
  [0.618, 0.8512, 0.7234],
  [0.6125, 0.8492, 0.7253],
  [0.6069, 0.8471, 0.7271],
  [0.6014, 0.845, 0.729],
  [0.5958, 0.8429, 0.7308],
  [0.5903, 0.8408, 0.7326],
  [0.5848, 0.8387, 0.7345],
  [0.5792, 0.8366, 0.7363],
  [0.5737, 0.8345, 0.7382],
  [0.5682, 0.8324, 0.74],
  [0.5626, 0.8303, 0.7419],
  [0.5571, 0.8282, 0.7437],
  [0.5516, 0.8261, 0.7456],
  [0.546, 0.8241, 0.7474],
  [0.5405, 0.822, 0.7493],
  [0.5349, 0.8199, 0.7511],
  [0.5294, 0.8178, 0.7529],
  [0.5239, 0.8157, 0.7548],
  [0.5183, 0.8136, 0.7566],
  [0.5128, 0.8115, 0.7585],
  [0.5073, 0.8094, 0.7603],
  [0.5017, 0.8073, 0.7622],
  [0.4962, 0.8052, 0.764],
  [0.4907, 0.8031, 0.7659],
  [0.4851, 0.801, 0.7677],
  [0.4796, 0.7985, 0.7696],
  [0.474, 0.7954, 0.7714],
  [0.4685, 0.7923, 0.7732],
  [0.463, 0.7892, 0.7751],
  [0.4574, 0.7862, 0.7769],
  [0.4519, 0.7831, 0.7788],
  [0.4464, 0.78, 0.7806],
  [0.4408, 0.7769, 0.7825],
  [0.4353, 0.7739, 0.7843],
  [0.4298, 0.7708, 0.7862],
  [0.4242, 0.7677, 0.788],
  [0.4187, 0.7646, 0.7899],
  [0.4131, 0.7616, 0.7917],
  [0.4076, 0.7585, 0.7935],
  [0.4021, 0.7554, 0.7954],
  [0.3965, 0.7523, 0.7972],
  [0.391, 0.7493, 0.7991],
  [0.3855, 0.7462, 0.8009],
  [0.3799, 0.7431, 0.8028],
  [0.3744, 0.74, 0.8046],
  [0.3689, 0.7369, 0.8065],
  [0.3633, 0.7339, 0.8083],
  [0.3578, 0.7308, 0.8101],
  [0.3522, 0.7277, 0.812],
  [0.3467, 0.7246, 0.8138],
  [0.3412, 0.7216, 0.8157],
  [0.3356, 0.7185, 0.8175],
  [0.3301, 0.7154, 0.8194],
  [0.3246, 0.7123, 0.8212],
  [0.319, 0.7093, 0.8231],
  [0.3135, 0.7062, 0.8249],
  [0.308, 0.7031, 0.8268],
  [0.3032, 0.699, 0.8258],
  [0.2989, 0.6942, 0.8233],
  [0.2946, 0.6894, 0.8207],
  [0.2903, 0.6846, 0.8181],
  [0.286, 0.6798, 0.8155],
  [0.2817, 0.675, 0.8129],
  [0.2774, 0.6702, 0.8103],
  [0.273, 0.6654, 0.8078],
  [0.2687, 0.6606, 0.8052],
  [0.2644, 0.6558, 0.8026],
  [0.2601, 0.651, 0.8],
  [0.2558, 0.6462, 0.7974],
  [0.2515, 0.6414, 0.7948],
  [0.2472, 0.6366, 0.7922],
  [0.2429, 0.6318, 0.7897],
  [0.2386, 0.627, 0.7871],
  [0.2343, 0.6222, 0.7845],
  [0.23, 0.6174, 0.7819],
  [0.2257, 0.6126, 0.7793],
  [0.2214, 0.6078, 0.7767],
  [0.2171, 0.603, 0.7742],
  [0.2128, 0.5982, 0.7716],
  [0.2085, 0.5934, 0.769],
  [0.2042, 0.5886, 0.7664],
  [0.1998, 0.5838, 0.7638],
  [0.1955, 0.579, 0.7612],
  [0.1912, 0.5742, 0.7587],
  [0.1869, 0.5694, 0.7561],
  [0.1826, 0.5646, 0.7535],
  [0.1783, 0.5598, 0.7509],
  [0.174, 0.555, 0.7483],
  [0.1697, 0.5502, 0.7457],
  [0.1654, 0.5457, 0.7434],
  [0.1611, 0.5413, 0.7412],
  [0.1568, 0.5368, 0.739],
  [0.1525, 0.5324, 0.7368],
  [0.1482, 0.528, 0.7346],
  [0.1439, 0.5236, 0.7324],
  [0.1396, 0.5191, 0.7301],
  [0.1353, 0.5147, 0.7279],
  [0.1309, 0.5103, 0.7257],
  [0.1266, 0.5058, 0.7235],
  [0.1223, 0.5014, 0.7213],
  [0.118, 0.497, 0.7191],
  [0.1137, 0.4925, 0.7169],
  [0.1094, 0.4881, 0.7146],
  [0.1051, 0.4837, 0.7124],
  [0.1008, 0.4793, 0.7102],
  [0.0965, 0.4748, 0.708],
  [0.0922, 0.4704, 0.7058],
  [0.0879, 0.466, 0.7036],
  [0.0836, 0.4615, 0.7014],
  [0.0793, 0.4571, 0.6991],
  [0.075, 0.4527, 0.6969],
  [0.0707, 0.4483, 0.6947],
  [0.0664, 0.4438, 0.6925],
  [0.0621, 0.4394, 0.6903],
  [0.0577, 0.435, 0.6881],
  [0.0534, 0.4305, 0.6859],
  [0.0491, 0.4261, 0.6836],
];

function getColor(value) {
  // Convert the value to a percentage between 0 and 1
  const percent = value / 100;
  max = GnBu.length - 1;
  toGet = Math.round(max * percent);
  color = GnBu[toGet];
  color = color.map((x) => Math.round(x * 255));
  // Return the color as an RGB string
  return `rgb(${color.join(", ")})`;
}

function tl(text, lang) {
  switch (lang) {
    case "en":
      return text;
    case "sv":
      if (text === "Location") {
        return "Plats";
      }
      if (text === "Loading data...") {
        return "Laddar data...";
      }
      if (text === "Calculating risk...") {
        return "Beräknar risk...";
      }
  }
}

function getWeather(position) {
  let riskel = document.getElementById("risk");
  const lat = position.latitude;
  const lon = position.longitude;

  let lang = "en";
  if (window.navigator.language) {
    lang = window.navigator.language.split("-")[0];
  }

  if (position.cityName) {
    document.getElementById("footer").textContent = `${tl("Location", lang)}: ${
      position.cityName
    } (IP)`;
  }

  riskel.textContent = tl("Loading data...", lang);
  fetch(`/weather?lat=${lat}&lon=${lon}&lang=${lang}`)
    .then((response) => {
      if (response.ok) {
        return response.json();
      }
      throw new Error("Network response was not ok.");
    })
    .then((data) => {
      riskel.textContent = tl("Calculating risk...", lang);
      const risk = data.frostRisk;
      riskel.textContent = `Risk: ${risk} %`;
      document.getElementById("description").textContent = data.riskDescription;
      document.body.style.backgroundColor = getColor(risk);
    })
    .catch((error) => {
      console.error("There was a problem fetching the weather data:", error);
    });

  if (!position.cityName) {
    fetch(`https://geocode.maps.co/reverse?lat=${lat}&lon=${lon}`)
      .then((response) => response.json())
      .then((data) => {
        if (data.city) {
          document.getElementById("footer").textContent = `${tl(
            "Location",
            lang
          )}: ${data.city} (GPS)`;
        } else {
          document.getElementById("footer").textContent = `${tl(
            "Location",
            lang
          )}: ${data.display_name.split(",").slice(0, 2).join(",")} (GPS)`;
        }
      })
      .catch((error) => {
        console.log(error);
        document.getElementById("footer").textContent = `${tl(
          "Location",
          lang
        )}: ${lat}, ${lon} (GPS)`;
      });
  }
}

getLocation();
// window.onload = getLocation;
